// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: email.sql

package repository

import (
	"context"
)

const createEmail = `-- name: CreateEmail :one
INSERT INTO email(title,body,status)
VALUES ($1,$2,$3)
RETURNING id, title, body, status, created_at
`

type CreateEmailParams struct {
	Title  string `json:"title"`
	Body   string `json:"body"`
	Status string `json:"status"`
}

func (q *Queries) CreateEmail(ctx context.Context, arg CreateEmailParams) (Email, error) {
	row := q.db.QueryRowContext(ctx, createEmail, arg.Title, arg.Body, arg.Status)
	var i Email
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Body,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const deleteBook = `-- name: DeleteBook :exec
DELETE FROM email
WHERE id = $1
`

func (q *Queries) DeleteBook(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteBook, id)
	return err
}

const getEmail = `-- name: GetEmail :one
SELECT id, title, body, status, created_at FROM email
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetEmail(ctx context.Context, id int64) (Email, error) {
	row := q.db.QueryRowContext(ctx, getEmail, id)
	var i Email
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Body,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const listEmails = `-- name: ListEmails :many
SELECT id, title, body, status, created_at FROM email
        WHERE status = $1
        ORDER BY id
        LIMIT $2
        offset $3
`

type ListEmailsParams struct {
	Status string `json:"status"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) ListEmails(ctx context.Context, arg ListEmailsParams) ([]Email, error) {
	rows, err := q.db.QueryContext(ctx, listEmails, arg.Status, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Email{}
	for rows.Next() {
		var i Email
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Body,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEmail = `-- name: UpdateEmail :one
UPDATE email
SET title = $2,
    body = $3,
    status = $4
WHERE id = $1
RETURNING id, title, body, status, created_at
`

type UpdateEmailParams struct {
	ID     int64  `json:"id"`
	Title  string `json:"title"`
	Body   string `json:"body"`
	Status string `json:"status"`
}

func (q *Queries) UpdateEmail(ctx context.Context, arg UpdateEmailParams) (Email, error) {
	row := q.db.QueryRowContext(ctx, updateEmail,
		arg.ID,
		arg.Title,
		arg.Body,
		arg.Status,
	)
	var i Email
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Body,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}
